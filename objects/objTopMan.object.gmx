<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTopStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprTopMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprTopPose;
poseImgSpeed = 5 / 60;
contactDamage = 6;
ground = false;
phase = 0; // 0 = shooting; 1 = waiting; 2 = preparing to spin; 3 = spinning in place; 4 = spinning and moving
spinDir = 0;
didShoot = false;
timer = 0;
maxTimer = 40;

// Health Bar
healthBarPrimaryColor[1] = 32;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_3.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 2);
enemyDamageValue(objBusterShotCharged, 4);

enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (isFight == true)
    {
        switch (phase)
        {
            case 0: // Shooting 
                sprite_index = sprTopShoot;
                image_speed = 0.1;
                if (floor(image_index) == 2 &amp;&amp; didShoot == false)
                {
                    didShoot = true;
                    var ID;
                    ID = instance_create(x + image_xscale
                        * (-sprite_get_xoffset(sprite_index) + 10),
                        y - sprite_get_yoffset(sprite_index) + 8,
                        objTopmanTop);
                    ID.image_xscale = image_xscale;
                    ID.number = 0;
                    ID = instance_create(x + image_xscale
                        * (-sprite_get_xoffset(sprite_index) + 10),
                        y - sprite_get_yoffset(sprite_index) + 8,
                        objTopmanTop);
                    ID.image_xscale = image_xscale;
                    ID.number = 1;
                    ID = instance_create(x + image_xscale
                        * (-sprite_get_xoffset(sprite_index) + 10),
                        y - sprite_get_yoffset(sprite_index) + 8,
                        objTopmanTop);
                    ID.image_xscale = image_xscale;
                    ID.number = 2;
                }
                else if (image_index &gt;= image_number - image_speed)
                {
                    image_index = 0;
                    sprite_index = sprTopStand;
                    phase = 1;
                    timer = 0;
                    didShoot = false;
                }
                break;
            case 1: // Waiting 
                sprite_index = sprTopStand;
                timer += 1;
                if (timer &gt;= 60)
                {
                    timer = 0;
                    phase = 2;
                }
                break;
            case 2: // Preparing to spin 
                sprite_index = sprTopPrepareSpin;
                timer += 1;
                if (timer &gt;= 10)
                {
                    timer = 0;
                    
                    // randomize();
                    maxTimer = irandom_range(52, 74);
                    phase = 3;
                    image_index = 0;
                }
                break;
            case 3: // Spinning in place 
                sprite_index = sprTopSpin;
                image_speed = 17 / 60;
                timer += 1;
                if (timer &gt;= maxTimer)
                {
                    timer = 0;
                    phase = 4;
                }
                break;
            case 4: // Spinning and moving 
                sprite_index = sprTopSpin;
                image_speed = 17 / 60;
                if (spinDir == 0)
                {
                    xspeed = image_xscale * 4.5;
                    spinDir = image_xscale;
                }
                else
                {
                    xspeed = spinDir * 4.5;
                }
                if ((bbox_left &lt;= view_xview + 32 &amp;&amp; /* image_xscale */ spinDir == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 32 &amp;&amp; /* image_xscale */ spinDir == 1)
                    || (checkSolid(/* image_xscale */ spinDir * 16, 0) || (xcoll * spinDir &gt; 0)))
                {
                    xspeed = 0;
                    x = round(x);
                    
                    // image_xscale *= -1;
                    calibrateDirection();
                    spinDir *= -1;
                    sprite_index = sprTopStand;
                    phase = 0;
                }
                break;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// guard if spinning
if (sprite_index == sprTopSpin)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objTopmanTop)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
